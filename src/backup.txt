#include <Keypad_I2C.h>             //keypad I2C library include 
#include <LiquidCrystal_I2C.h>      //lcd library include 
#include <HX711.h>                  //load cell module include 
#include <Wire.h>                   // for I2c

#define CALIBRATION_FACTOR 438.86       //calibaration factor using 
#define lcd_addr 0x27     
#define keypad_addr 0x20
#define numberCursorInitialPosition 4


char key;
char inputChar;
String inputString = "";
int set = numberCursorInitialPosition;
float WeightDisplay = 0;

// HX711 circuit wiring
const int LOADCELL_DOUT_PIN = 10;
const int LOADCELL_SCK_PIN = 11;

//IR sensor value store and ir sensor pin defination for pinMode setup
int IRsensorValue[4] = {0,0,0,0};
int IRpins[4] = {2,3,4,5};

//Motordriver pin defin
uint8_t MotorOutputValue[4] = {LOW,LOW,LOW,LOW};
int MotorPins[4] = {6,7,8,9};

//Keypad variables
bool disableNumInput = false;
const byte ROWS = 4; 
const byte COLS = 4;
char keys[ROWS][COLS] = {
    {'1','4','7','*'},
    {'2','5','8','0'},
    {'3','6','9','#'},
    {'A','B','C','D'}
};

//Switchpins number
uint8_t SwitchPinsValue[2]={1,1};
uint8_t SwitchPins[2] ={12,13};

//Keypad pins connected to the I2C-Expander pins P0-P6
byte rowPins[ROWS] = {0, 1, 2, 3};          // connect to the row pinouts of the keypad
byte colPins[COLS] = {4, 5, 6, 7};          // connect to the column pinouts of the keypad


//HX711 I2C load cell object
HX711 scale;

//LCD I2C object
LiquidCrystal_I2C lcd(lcd_addr,26,4);

//Keypad I2C object
Keypad_I2C I2C_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS, keypad_addr, PCF8574 );


String IRarrayinfo();
void initialMsg();

void Slider_Open();
void Slider_Close();
void Slider_Stop();

void Motor_02_Forword();
void Motor_02_Reverse();
void Motor_02_Stop();


void setup() {
    Serial.begin(9600);
    I2C_Keypad.begin();
    scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);

    //setting up arduino digital  pins  2,3,4,5 for IR sensors 
    for(int i=0; i<4; i++){
        pinMode(IRpins[i], INPUT); 
    }

    //setting up arduino digital pins 6,7,8,9 for motorDriver control
    for(int i=0; i<4; i++){
        pinMode(MotorPins[i], OUTPUT); 
    }

    //setting up switch pins 12, 13 as INPUT_PULLUP
    for(int i=0; i<2; i++){
        pinMode(SwitchPins[i], INPUT_PULLUP); 
    }

    lcd.init();
    lcd.begin(20,4);
    lcd.backlight();
    I2C_Keypad.begin();
    scale.set_scale(CALIBRATION_FACTOR);
    scale.tare();    
    lcd.clear();
    initialMsg();          
} 

void loop() {
    key = I2C_Keypad.getKey();
    inputChar = key;

    if(key > 47 && key < 58){  
        if(inputString.length() < 11){
            if(set == numberCursorInitialPosition)
                initialMsg();
            lcd.setCursor(set,3);
            lcd.write(key);
            inputString += (char)inputChar;
            set++;
        }
    }
    switch (key) {
            case 'C':
                inputString="";
                scale.tare();
                if(scale.is_ready())
                    WeightDisplay = round(scale.get_units(5));
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("Weight Reset: ");
                lcd.setCursor(14,0);
                set = numberCursorInitialPosition;
                break;
        }

   

    if(inputString == "01521327657"){
        SwitchPinsValue[0] = digitalRead(SwitchPins[0]);
        if(SwitchPinsValue[0] == 1){
            Slider_Open();
        }
        else if(SwitchPinsValue[0] == 0) {
            Slider_Stop();
        }
        switch (key) {
            case 'A':
                //inputString="";
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("Weight: ");
                if(scale.is_ready())
                    WeightDisplay = round(scale.get_units(5));
                lcd.setCursor(8,0);
                lcd.print(WeightDisplay);
                break;

            case 'B':
                //inputString="";
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("IR Reading: ");
                lcd.setCursor(12,0);
                lcd.print(IRarrayinfo());
                break;

            case 'C':
                inputString="";
                scale.tare();
                if(scale.is_ready())
                    WeightDisplay = round(scale.get_units(5));
                lcd.clear();
                lcd.setCursor(0,0);
                lcd.print("Weight Reset: ");
                lcd.setCursor(14,0);
                set = numberCursorInitialPosition;
                break;
        }
    }
}


String IRarrayinfo(){
    for(int i =0;i<4;i++ ){
        IRsensorValue[i]=digitalRead(IRpins[i]); //updating array
    }

    if(IRsensorValue[3] == 0 && IRsensorValue[2] == 0 && IRsensorValue[1] == 0 && IRsensorValue[0]== 0)
        return ("Level 4");
    else if(IRsensorValue[3] == 0 && IRsensorValue[2] == 0 && IRsensorValue[1] == 0 && IRsensorValue[0] == 1 )
        return ("Level 3");
    else if(IRsensorValue[3] == 0 && IRsensorValue[2] == 0 && IRsensorValue[1] == 1 && IRsensorValue[0] == 1)
        return ("Level 2");
    else if(IRsensorValue[3] == 0 && IRsensorValue[2] == 1 && IRsensorValue[1] == 1 && IRsensorValue[0] == 1)
        return("Level 1");
    else if(IRsensorValue[3] == 1 && IRsensorValue[2] == 1 && IRsensorValue[1] == 1 && IRsensorValue[0] == 1)
        return("Level 0");
    else
        return("invalid");
}


void Slider_Open(){ 
    digitalWrite(MotorPins[0],HIGH);
    digitalWrite(MotorPins[1],LOW);
    MotorOutputValue[0] = HIGH ;
    MotorOutputValue[1] = LOW;
}

void Slider_Close(){
    digitalWrite(MotorPins[0],LOW);
    digitalWrite(MotorPins[1],HIGH);
    MotorOutputValue[0] = LOW ;
    MotorOutputValue[1] = HIGH;
}

void Slider_Stop(){
    digitalWrite(MotorPins[0],LOW);
    digitalWrite(MotorPins[1],LOW);
    MotorOutputValue[0] = LOW ;
    MotorOutputValue[1] = LOW;
}

void Motor_02_Forword(){
    digitalWrite(MotorPins[2],HIGH);
    digitalWrite(MotorPins[3],LOW);
    MotorOutputValue[2] = HIGH; 
    MotorOutputValue[3] = LOW;
}

void Motor_02_Reverse(){
    digitalWrite(MotorPins[2],LOW);
    digitalWrite(MotorPins[3],HIGH);
    MotorOutputValue[2] = LOW ;
    MotorOutputValue[3] = HIGH;
}

void Motor_02_Stop(){
    digitalWrite(MotorPins[2],LOW);
    digitalWrite(MotorPins[3],LOW);
    MotorOutputValue[2] = LOW; 
    MotorOutputValue[3] = LOW;
}

void initialMsg(){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("__Save YOUR Planet__");
    lcd.setCursor(0,1);
    lcd.print("Put YOUR Phone");
    lcd.setCursor(0,2);
    lcd.print("Number to start..");
}